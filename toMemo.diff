diff --git a/src/App.tsx b/src/App.tsx
index 2fcb4ee..ef53aa4 100644
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -307,7 +307,7 @@ export default function App() {
       ) : (
         <EditorComponent
           editorRef={editorRef}
-          timelineData={timelineData}
+          // timelineData={timelineData}
           // currentAudioPosition={currentPosition}
         >
           <AudioControlComponent
diff --git a/src/components/timeline/editor.tsx b/src/components/timeline/editor.tsx
index f0d8a33..acba738 100644
--- a/src/components/timeline/editor.tsx
+++ b/src/components/timeline/editor.tsx
@@ -1,18 +1,17 @@
 import useGlobalAppStore from '@/lib/timeline_state';
-import TimelineBlockComponent from './timelineBlocks';
 import PlayingIndicator from './playingIndicator';
 import dataStore from '@/lib/data_store';
 import { GlyphBlock } from '@/lib/glyph_model';
 import BPMSnapGridLinesComponent from './bpmGridLines';
-import HeavyTimelineBlock from '@/logic/hc_tb';
 import { useAreaSelection } from '@/lib/area_selection_helper';
-import { useRef } from 'react';
+import { useMemo, useRef } from 'react';
 import { SelectionContext } from '@/lib/area_select_context';
+import TimelineRow from './timelineRow_memo';
 
 type Props = {
   // currentAudioPosition: number;
   // duration: number ;
-  timelineData: {
+  timelineData?: {
     [key: number]: GlyphBlock[];
   };
   editorRef: React.Ref<HTMLDivElement>;
@@ -20,20 +19,16 @@ type Props = {
 };
 
 export function EditorComponent({
-  timelineData,
+  // timelineData,
   children,
   editorRef
 }: // currentAudioPosition,
 Props) {
-  const addItem = useGlobalAppStore((state) => state.addItem);
   const bpmValue = useGlobalAppStore((state) => state.appSettings.bpmValue);
   const snapToBpmActive = useGlobalAppStore((state) => state.appSettings.snapToBpmActive);
-  const isZoneVisible = useGlobalAppStore((state) => state.appSettings.isZoneVisible);
-  const durationInMilis = useGlobalAppStore((state) => state.audioInformation.durationInMilis);
-  const itemsSchema = useGlobalAppStore((state) => state.items);
-  const numberOfRowsToGenerate = Object.keys(itemsSchema).length;
   const timelinePixelFactor = useGlobalAppStore((state) => state.appSettings.timelinePixelFactor);
-  const showHeavyUi = useGlobalAppStore((state) => state.appSettings.showHeavyUi);
+  const durationInMilis = useGlobalAppStore((state) => state.audioInformation.durationInMilis);
+  const isZoneVisible = useGlobalAppStore((state) => state.appSettings.isZoneVisible);
 
   // label feat.
   const handleScroll = (e: React.UIEvent<HTMLDivElement>) => {
@@ -75,86 +70,36 @@ Props) {
       </div>
     </div>
   );
+}
 
-  function TimelineRows() {
-    const timelineRows: React.ReactNode[] = [];
+const TimelineRows = () => {
+  const timelineData = useGlobalAppStore((state) => state.items);
+  const timelinePixelFactor = useGlobalAppStore((state) => state.appSettings.timelinePixelFactor);
+  const showHeavyUi = useGlobalAppStore((state) => state.appSettings.showHeavyUi);
+  const isZoneVisible = useGlobalAppStore((state) => state.appSettings.isZoneVisible);
+  const numberOfRowsToGenerate = Object.keys(timelineData).length;
 
+  const timelineRows = useMemo(() => {
+    const rows: React.ReactNode[] = [];
     for (let i = 0; i < numberOfRowsToGenerate; i++) {
-      timelineRows.push(
-        <div
+      // console.log('editor: rendered row ', i);
+      const newData:GlyphBlock[] = timelineData[i];
+      console.log('isSelected: ',newData[0]?.isSelected);
+      // const newData:GlyphBlock[] = [...timelineData[i]];
+      rows.push(
+        <TimelineRow
           key={i}
-          title="Double tap to add a new glyph block"
-          className={`border-dotted border-t border-[#3e3e3e] relative select-none min-h-[50px]`}
-          // ^^ controls editor row track size
-          onDoubleClick={(e) => {
-            e.preventDefault();
-            const scrollValue: number = dataStore.get('editorScrollX') ?? 0;
-            // console.log("double clicked?");
-            addItem(
-              i,
-              ((e.clientX + scrollValue) / timelinePixelFactor) * 1000 //convert to milis; offset needed cuz pointer has width too
-            );
-          }}
-        >
-          {/* Label UI */}
-          {isZoneVisible && (
-            <div
-              className="z-10 w-[10px] h-[15px] text-white text-xl rounded-l-[12px] pl-6 font-[ndot] mt-1 glyph_label duration-75 select-none pointer-events-none"
-              style={{
-                mixBlendMode: 'difference',
-                position: 'absolute',
-                left: 0
-              }}
-            >
-              <div>{i + 1}</div>
-            </div>
-          )}
-          <TimelineBlocks
-            showHeavyUi={showHeavyUi}
-            rowTimelineData={timelineData[i]}
-            timelinePixelFactor={timelinePixelFactor}
-          />
-        </div>
+          index={i}
+          isZoneVisible={isZoneVisible}
+          showHeavyUi={showHeavyUi}
+          rowTimelineData={newData}
+          timelinePixelFactor={timelinePixelFactor}
+        />
       );
     }
 
-    return timelineRows;
-  }
-}
-
-const TimelineBlocks = ({
-  rowTimelineData,
-  timelinePixelFactor,
-  showHeavyUi
-}: {
-  rowTimelineData: GlyphBlock[];
-  timelinePixelFactor: number;
-  showHeavyUi: boolean;
-}) => {
-  const row: React.JSX.Element[] = [];
-  for (let i = 0; i < rowTimelineData.length; i++) {
-    row.push(
-      <div
-        key={rowTimelineData[i].id}
-        className="h-full w-[50px] absolute inset-0 py-[4px]"
-        style={{
-          marginLeft: `${(rowTimelineData[i].startTimeMilis / 1000) * timelinePixelFactor}px`
-        }}
-      >
-        {!showHeavyUi ? (
-          <TimelineBlockComponent
-            glyphItem={rowTimelineData[i]}
-            // duration={duration}
-          />
-        ) : (
-          <HeavyTimelineBlock glyphItem={rowTimelineData[i]} />
-        )}
-        {/* Debug Stuff */}
-        {/* {e.startTime} */}
-        {/* {e.duration} */}
-      </div>
-    );
-  }
+    return rows;
+  }, [numberOfRowsToGenerate, isZoneVisible, showHeavyUi, timelineData, timelinePixelFactor]);
 
-  return <>{row}</>;
+  return <>{timelineRows}</>;
 };
diff --git a/src/lib/helpers.ts b/src/lib/helpers.ts
index cff003f..4396de5 100644
--- a/src/lib/helpers.ts
+++ b/src/lib/helpers.ts
@@ -162,6 +162,49 @@ export function getDateTime(): string {
   return formattedDate;
 }
 
+export const deepCompareGlyphBlocks = (arr1: GlyphBlock[], arr2: GlyphBlock[]): boolean => {
+  if (arr1.length !== arr2.length) {
+    return false;
+  }
+
+  for (let i = 0; i < arr1.length; i++) {
+    const glyph1 = arr1[i];
+    const glyph2 = arr2[i];
+
+    if (
+      glyph1.id !== glyph2.id ||
+      glyph1.startTimeMilis !== glyph2.startTimeMilis ||
+      glyph1.durationMilis !== glyph2.durationMilis ||
+      glyph1.startingBrightness !== glyph2.startingBrightness ||
+      glyph1.glyphId !== glyph2.glyphId ||
+      glyph1.isSelected !== glyph2.isSelected ||
+      glyph1.effectId !== glyph2.effectId
+    ) {
+      return false;
+    }
+
+    if (!arrayEquals(glyph1.effectData, glyph2.effectData)) {
+      return false;
+    }
+  }
+
+  return true;
+};
+
+const arrayEquals = (arr1: number[], arr2: number[]): boolean => {
+  if (arr1.length !== arr2.length) {
+    return false;
+  }
+
+  for (let i = 0; i < arr1.length; i++) {
+    if (arr1[i] !== arr2[i]) {
+      return false;
+    }
+  }
+
+  return true;
+};
+
 // eslint-disable-next-line @typescript-eslint/no-explicit-any
 // function throttle(func: (...args: any[]) => void, limit: number) {
 //   let lastFunc: ReturnType<typeof setTimeout>;
